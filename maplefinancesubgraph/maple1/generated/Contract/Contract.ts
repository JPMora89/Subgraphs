// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DefaultVersionSet extends ethereum.Event {
  get params(): DefaultVersionSet__Params {
    return new DefaultVersionSet__Params(this);
  }
}

export class DefaultVersionSet__Params {
  _event: DefaultVersionSet;

  constructor(event: DefaultVersionSet) {
    this._event = event;
  }

  get version_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ImplementationRegistered extends ethereum.Event {
  get params(): ImplementationRegistered__Params {
    return new ImplementationRegistered__Params(this);
  }
}

export class ImplementationRegistered__Params {
  _event: ImplementationRegistered;

  constructor(event: ImplementationRegistered) {
    this._event = event;
  }

  get version_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get implementationAddress_(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get initializer_(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class InstanceDeployed extends ethereum.Event {
  get params(): InstanceDeployed__Params {
    return new InstanceDeployed__Params(this);
  }
}

export class InstanceDeployed__Params {
  _event: InstanceDeployed;

  constructor(event: InstanceDeployed) {
    this._event = event;
  }

  get version_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get instance_(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get initializationArguments_(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class InstanceUpgraded extends ethereum.Event {
  get params(): InstanceUpgraded__Params {
    return new InstanceUpgraded__Params(this);
  }
}

export class InstanceUpgraded__Params {
  _event: InstanceUpgraded;

  constructor(event: InstanceUpgraded) {
    this._event = event;
  }

  get instance_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromVersion_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toVersion_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get migrationArguments_(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class MapleGlobalsSet extends ethereum.Event {
  get params(): MapleGlobalsSet__Params {
    return new MapleGlobalsSet__Params(this);
  }
}

export class MapleGlobalsSet__Params {
  _event: MapleGlobalsSet;

  constructor(event: MapleGlobalsSet) {
    this._event = event;
  }

  get mapleGlobals_(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpgradePathDisabled extends ethereum.Event {
  get params(): UpgradePathDisabled__Params {
    return new UpgradePathDisabled__Params(this);
  }
}

export class UpgradePathDisabled__Params {
  _event: UpgradePathDisabled;

  constructor(event: UpgradePathDisabled) {
    this._event = event;
  }

  get fromVersion_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toVersion_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpgradePathEnabled extends ethereum.Event {
  get params(): UpgradePathEnabled__Params {
    return new UpgradePathEnabled__Params(this);
  }
}

export class UpgradePathEnabled__Params {
  _event: UpgradePathEnabled;

  constructor(event: UpgradePathEnabled) {
    this._event = event;
  }

  get fromVersion_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toVersion_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get migrator_(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  createInstance(arguments_: Bytes, salt_: Bytes): Address {
    let result = super.call(
      "createInstance",
      "createInstance(bytes,bytes32):(address)",
      [
        ethereum.Value.fromBytes(arguments_),
        ethereum.Value.fromFixedBytes(salt_),
      ],
    );

    return result[0].toAddress();
  }

  try_createInstance(
    arguments_: Bytes,
    salt_: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createInstance",
      "createInstance(bytes,bytes32):(address)",
      [
        ethereum.Value.fromBytes(arguments_),
        ethereum.Value.fromFixedBytes(salt_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultImplementation(): Address {
    let result = super.call(
      "defaultImplementation",
      "defaultImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_defaultImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultImplementation",
      "defaultImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultVersion(): BigInt {
    let result = super.call("defaultVersion", "defaultVersion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_defaultVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultVersion",
      "defaultVersion():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInstanceAddress(arguments_: Bytes, salt_: Bytes): Address {
    let result = super.call(
      "getInstanceAddress",
      "getInstanceAddress(bytes,bytes32):(address)",
      [
        ethereum.Value.fromBytes(arguments_),
        ethereum.Value.fromFixedBytes(salt_),
      ],
    );

    return result[0].toAddress();
  }

  try_getInstanceAddress(
    arguments_: Bytes,
    salt_: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getInstanceAddress",
      "getInstanceAddress(bytes,bytes32):(address)",
      [
        ethereum.Value.fromBytes(arguments_),
        ethereum.Value.fromFixedBytes(salt_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementationOf(version_: BigInt): Address {
    let result = super.call(
      "implementationOf",
      "implementationOf(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(version_)],
    );

    return result[0].toAddress();
  }

  try_implementationOf(version_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementationOf",
      "implementationOf(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(version_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInstance(param0: Address): boolean {
    let result = super.call("isInstance", "isInstance(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isInstance(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInstance", "isInstance(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mapleGlobals(): Address {
    let result = super.call("mapleGlobals", "mapleGlobals():(address)", []);

    return result[0].toAddress();
  }

  try_mapleGlobals(): ethereum.CallResult<Address> {
    let result = super.tryCall("mapleGlobals", "mapleGlobals():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  migratorForPath(oldVersion_: BigInt, newVersion_: BigInt): Address {
    let result = super.call(
      "migratorForPath",
      "migratorForPath(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(oldVersion_),
        ethereum.Value.fromUnsignedBigInt(newVersion_),
      ],
    );

    return result[0].toAddress();
  }

  try_migratorForPath(
    oldVersion_: BigInt,
    newVersion_: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "migratorForPath",
      "migratorForPath(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(oldVersion_),
        ethereum.Value.fromUnsignedBigInt(newVersion_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradeEnabledForPath(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "upgradeEnabledForPath",
      "upgradeEnabledForPath(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBoolean();
  }

  try_upgradeEnabledForPath(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "upgradeEnabledForPath",
      "upgradeEnabledForPath(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  versionOf(implementation_: Address): BigInt {
    let result = super.call("versionOf", "versionOf(address):(uint256)", [
      ethereum.Value.fromAddress(implementation_),
    ]);

    return result[0].toBigInt();
  }

  try_versionOf(implementation_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("versionOf", "versionOf(address):(uint256)", [
      ethereum.Value.fromAddress(implementation_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get globals_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateInstanceCall extends ethereum.Call {
  get inputs(): CreateInstanceCall__Inputs {
    return new CreateInstanceCall__Inputs(this);
  }

  get outputs(): CreateInstanceCall__Outputs {
    return new CreateInstanceCall__Outputs(this);
  }
}

export class CreateInstanceCall__Inputs {
  _call: CreateInstanceCall;

  constructor(call: CreateInstanceCall) {
    this._call = call;
  }

  get arguments_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get salt_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateInstanceCall__Outputs {
  _call: CreateInstanceCall;

  constructor(call: CreateInstanceCall) {
    this._call = call;
  }

  get instance_(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DisableUpgradePathCall extends ethereum.Call {
  get inputs(): DisableUpgradePathCall__Inputs {
    return new DisableUpgradePathCall__Inputs(this);
  }

  get outputs(): DisableUpgradePathCall__Outputs {
    return new DisableUpgradePathCall__Outputs(this);
  }
}

export class DisableUpgradePathCall__Inputs {
  _call: DisableUpgradePathCall;

  constructor(call: DisableUpgradePathCall) {
    this._call = call;
  }

  get fromVersion_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toVersion_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DisableUpgradePathCall__Outputs {
  _call: DisableUpgradePathCall;

  constructor(call: DisableUpgradePathCall) {
    this._call = call;
  }
}

export class EnableUpgradePathCall extends ethereum.Call {
  get inputs(): EnableUpgradePathCall__Inputs {
    return new EnableUpgradePathCall__Inputs(this);
  }

  get outputs(): EnableUpgradePathCall__Outputs {
    return new EnableUpgradePathCall__Outputs(this);
  }
}

export class EnableUpgradePathCall__Inputs {
  _call: EnableUpgradePathCall;

  constructor(call: EnableUpgradePathCall) {
    this._call = call;
  }

  get fromVersion_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toVersion_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get migrator_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class EnableUpgradePathCall__Outputs {
  _call: EnableUpgradePathCall;

  constructor(call: EnableUpgradePathCall) {
    this._call = call;
  }
}

export class RegisterImplementationCall extends ethereum.Call {
  get inputs(): RegisterImplementationCall__Inputs {
    return new RegisterImplementationCall__Inputs(this);
  }

  get outputs(): RegisterImplementationCall__Outputs {
    return new RegisterImplementationCall__Outputs(this);
  }
}

export class RegisterImplementationCall__Inputs {
  _call: RegisterImplementationCall;

  constructor(call: RegisterImplementationCall) {
    this._call = call;
  }

  get version_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get implementationAddress_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initializer_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RegisterImplementationCall__Outputs {
  _call: RegisterImplementationCall;

  constructor(call: RegisterImplementationCall) {
    this._call = call;
  }
}

export class SetDefaultVersionCall extends ethereum.Call {
  get inputs(): SetDefaultVersionCall__Inputs {
    return new SetDefaultVersionCall__Inputs(this);
  }

  get outputs(): SetDefaultVersionCall__Outputs {
    return new SetDefaultVersionCall__Outputs(this);
  }
}

export class SetDefaultVersionCall__Inputs {
  _call: SetDefaultVersionCall;

  constructor(call: SetDefaultVersionCall) {
    this._call = call;
  }

  get version_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDefaultVersionCall__Outputs {
  _call: SetDefaultVersionCall;

  constructor(call: SetDefaultVersionCall) {
    this._call = call;
  }
}

export class SetGlobalsCall extends ethereum.Call {
  get inputs(): SetGlobalsCall__Inputs {
    return new SetGlobalsCall__Inputs(this);
  }

  get outputs(): SetGlobalsCall__Outputs {
    return new SetGlobalsCall__Outputs(this);
  }
}

export class SetGlobalsCall__Inputs {
  _call: SetGlobalsCall;

  constructor(call: SetGlobalsCall) {
    this._call = call;
  }

  get mapleGlobals_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalsCall__Outputs {
  _call: SetGlobalsCall;

  constructor(call: SetGlobalsCall) {
    this._call = call;
  }
}

export class UpgradeInstanceCall extends ethereum.Call {
  get inputs(): UpgradeInstanceCall__Inputs {
    return new UpgradeInstanceCall__Inputs(this);
  }

  get outputs(): UpgradeInstanceCall__Outputs {
    return new UpgradeInstanceCall__Outputs(this);
  }
}

export class UpgradeInstanceCall__Inputs {
  _call: UpgradeInstanceCall;

  constructor(call: UpgradeInstanceCall) {
    this._call = call;
  }

  get toVersion_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get arguments_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeInstanceCall__Outputs {
  _call: UpgradeInstanceCall;

  constructor(call: UpgradeInstanceCall) {
    this._call = call;
  }
}
